
435. Non-overlapping Intervalsï¼ˆmedium)
Link:https://leetcode.com/problems/non-overlapping-intervals/description/

Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

 

Example 1:

Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.
Example 2:

Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.
Example 3:

Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.

class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        // Sorting the array in ascending order based on the start time.
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[1], b[1]));
        // Define a variable to store the number of overlapped intervals.
        int res = 1;
        int end = intervals[0][1];
        //loop start from the second interval.
        for(int i = 1; i < intervals.length; i++){
            // Reset the start every time.
            int start = intervals[i][0];
            // Find no overlapping interval.
            if(start >= end){
                res++;
                // Set the end to the next interval. end is always one befor start.
                end = intervals[i][1];
            }
        }
        // Return the number of intervals to remove.
        return intervals.length - res;
    }
}


692. Top K Frequent Words(Medium)
Given an array of strings words and an integer k, return the k most frequent strings.

Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.

 

Example 1:

Input: words = ["i","love","leetcode","i","love","coding"], k = 2
Output: ["i","love"]
Explanation: "i" and "love" are the two most frequent words.
Note that "i" comes before "love" due to a lower alphabetical order.
Example 2:

Input: words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4
Output: ["the","is","sunny","day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.

class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        // Using a map to store the word as key and the frquency of the word as value.
        Map<String,Integer> map = new HashMap<>();
        for(int i = 0; i < words.length; i++){
            map.put(words[i],map.getOrDefault(words[i],0) + 1);
        }
        List<String> list = new ArrayList<>();
        //Using priority queue to sort the words in an descending order based on the word frequecy.
        PriorityQueue<String> pq = new PriorityQueue<>((a,b)-> {
            //if the frequency is the same, store their lexicographical order.
            if(map.get(b) == map.get(a)){
                return a.compareTo(b);
            }
            return map.get(b) - map.get(a);
        });
        // store all the words form map into the pq.
        for(String key : map.keySet()){
            pq.offer(key);
        }
        //poll the top frenquency words from the pq, and add them to the list.
        while(k > 0){
            list.add(pq.poll());
            k--;
        }
        return list;
    }
}

Leetcode Problem 98: Validate Binary Search Tree(medium)
Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:
Input: root = [2,1,3]
Output: true

Example 2:
Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

class Solution {
    public boolean isValidBST(TreeNode root) {
        return helper(root, null, null);    
    }
    // Helper methos to check whether a root is in the middle of min to max.
    public boolean helper(TreeNode root, TreeNode min, TreeNode max){
        // Base case: reach a leaf node or empty tree.
        if(root == null) return true;
        //if min is not a leaf check it is satisfied the order.
        if(min != null && root.val <= min.val){
            return false;
        }
        //if min is not a leaf check it is satisfied the order.
        if(max != null && root.val >= max.val){
            return false;
        }
        //enter the next level to check left node and right node is also balanced.
        return helper(root.left, min, root) && helper(root.right, root, max);
    }
}



Problem 513. Find Bottom Left Tree Value(medium)
Given the root of a binary tree, return the leftmost value in the last row of the tree.

Example 1:
Input: root = [2,1,3]
Output: 1

Example 2:
Input: root = [1,2,3,4,null,5,6,null,null,7]
Output: 7

Solution:

Solution:
class Solution {
    // Global variables to store the result and the maximum depth found so far.
    // Global variables can avoid reset in the recursion.
    int res = 0; 
    int maxDepth = Integer.MIN_VALUE; 
    int depth = 1; 

    public int findBottomLeftValue(TreeNode root) {
        // Call the recursive method to traverse the entire tree
        traversal(root);
        return res;
    }

    // Helper method to recursively traverse the entire tree
    public void traversal(TreeNode root) {
        // Base case: reach a leaf node or empty tree.
        if (root == null) return;

        // Update the current recursion depth
        depth++;
        // Traverse order: root -> left -> right;
        // Update the maximum depth and result value if the current depth is greater than the previous maximum depth
        if (depth > maxDepth) {
            maxDepth = depth;
            res = root.val; 
        }

        traversal(root.left);
        traversal(root.right);

        // Return to the upper level, decrement the current recursion depth
        depth--;
    }
}




 

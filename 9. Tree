102. Binary Tree Level Order Traversal (medium) 
Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        // Check edge case.
        if(root == null) return result;
        // Use queue to help traverse the tree.
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            // get the size of the current queue which means the number of node at the current level.
            int size = queue.size();
            List<Integer> list = new ArrayList<>();
            //for loop all the node in current level
            for(int i = 0; i < size; i++){
                // get node in the same level from left to right, add them to the list.
                TreeNode node = queue.poll();
                list.add(node.val);
                // check every child of the current node from left yt right.
                if(node.left != null) queue.offer(node.left);
                if(node.right != null) queue.offer(node.right);
            }
            //add the list of all the nodes of current level to the result list.
            result.add(list);
        }
        return result;
    }
}

129. Sum Root to Leaf Numbers (medium) 
You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.

 

Example 1:
Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.

class Solution {
    // Global variable StringBuilder path to keep checking.
    StringBuilder path = new StringBuilder();
    // Global variable output to return.
    int output;
    public int sumNumbers(TreeNode root) {
        traversal(root);
        return output;   
    } 
    // helper method to help traverse the root, and uodating the output integer along the way.
    public void traversal(TreeNode root){
        if(root == null) return;
        // Append every node value to the path.
        path.append(root.val);
        // find a leaf
        if(root.left == null && root.right == null){
            // sum the path value
            output += Integer.parseInt(path.toString());
        }
        // taverse left and rihgt.
        traversal(root.left);
        traversal(root.right);
        // delete the last append node value before backtracking.
        path.deleteCharAt(path.length() - 1);
    }
}

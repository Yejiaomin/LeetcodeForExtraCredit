Leetcode Problem: 912. Sort an Array(medium)
Link: https://leetcode.com/problems/sort-an-array/description/?source=submission-ac
Given an array of integers nums, sort the array in ascending order and return it.

You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

Example 1:

Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).
Example 2:

Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]
Explanation: Note that the values of nums are not necessairly unique.


Solution(Quick sort):
class Solution {
    public int[] sortArray(int[] nums) {
        quicksSortArray(nums,0,nums.length-1);
        return nums;
    }
    public void quicksSortArray(int[] nums,int left,int right){
        if (left >= right) {
            return;
        }
        int start = left;
        int end = right;
        // find mid index as the pivot.
        int index = (end-start)/2 +start;
        int pivot = nums[index];
        int temp;
        // start swapping to make sure the element in the left of the pivot is smaller, element in the right of the pivot is greater.
        while(start <= end){
            // if the element in the left of the pivot is already smaller, start index add one.
            while(start <= end && nums[start] < pivot){
                start++;
            }
            // if the element in the right of the pivot is already greater, start index minus one.
            while(start <= end && nums[end] > pivot){
                end--;
            }
            // swap start and end index value if start <= end.
            if(start <= end){
                temp = nums[start];
                nums[start] = nums[end];
                nums[end] = temp;
                start++;
                end--;
            }
        }
             // recusion to sort the sub array from left to pivot.
            quicksSortArray(nums,left,end);
            // recusion to sort the sub array from pivot to end of the sub array.
            quicksSortArray(nums,start,right);
    }
}


Leetcode Problem: 451. Sort Characters By Frequency
Link: https://leetcode.com/problems/sort-characters-by-frequency/description/
Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

Solution:
class Solution {
    public String frequencySort(String s) {
        // build a character frequency map, key: character, value: frequency;
        Map<Character,Integer> map = new HashMap<>();
        for(int i = 0; i < s.length(); i++){
            char ch = s.charAt(i);
            map.put(ch,(map.getOrDefault(ch,0)+1));
        }
        // Create PriorityQueue of the Characters based on the frequency of the character in descending order
        PriorityQueue<Character> pq= new PriorityQueue<>((a,b)->map.get(b)-map.get(a));
        // add all the keys to the queue
        for(char key:map.keySet()){
            pq.offer(key);
        }
      
        StringBuilder ss = new StringBuilder();
        // poll the characters from the queue, append them to a string.
        while(!pq.isEmpty()){
            char letter = pq.poll();
            int times = map.get(letter);
            //append characters different times based on its frquency
            for(int i =0; i <times; i++){
                ss.append(letter);
            }
        }
        return ss.toString();
    }
}
